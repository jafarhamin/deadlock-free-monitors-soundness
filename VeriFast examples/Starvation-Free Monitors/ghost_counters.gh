/*
  Abstract Ghost Counters
*/

#ifndef GHOST_COUNTERS_H
#define GHOST_COUNTERS_H

predicate ctr(int id; int n);
predicate tic(int id);

lemma int new_ctr();
  requires true;
  ensures ctr(result, 0);

lemma void inc_ctr(int id);
  requires ctr(id,?n);
  ensures ctr(id,n+1) &*& tic(id);

lemma void dec_ctr(int id);
  requires ctr(id,?n) &*& tic(id);
  ensures ctr(id,n-1) &*& n > 0;

predicate pctr(int id; int n);
predicate ptic(int id, int u, int p);

lemma int new_pctr();
  requires true;
  ensures pctr(result, 0);

lemma void inc_pctr(int id);
  requires pctr(id,?n);
  ensures pctr(id,n+1) &*& ptic(id,1,0);

lemma void dec_pctr(int id);
  requires pctr(id,?n) &*& ptic(id,1,0);
  ensures pctr(id,n-1) &*& ptic(id,0,0) &*& n > 0;

lemma void merge_ptic(int id, int u1, int p1, int u2, int p2);
  requires ptic(id,u1,p1) &*& ptic(id,u2,p2);
  ensures ptic(id,u1+u2,p1+p2);


#endif
